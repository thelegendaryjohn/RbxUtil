"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[310],{4411:e=>{e.exports=JSON.parse('{"functions":[],"properties":[],"types":[],"name":"Find","desc":"A utility function for finding objects in the data model hierarchy.\\n\\nSimilar to `FindFirstChild`, except it explicitly errors if any object\\nis not found, as well as a more helpful message as to what wasn\'t found.\\n\\n```lua\\nlocal find = require(ReplicatedStorage.Packages.find)\\n\\n-- Find instance \\"workspace.Some.Folder.Here.Item\\":\\nlocal item = find(workspace, \\"Some\\", \\"Folder\\", \\"Here\\", \\"Item\\")\\n```\\n\\nIn the above example, if \\"Folder\\" didn\'t exist, the function would throw an error with the message: `failed to find instance \\"Folder\\" within \\"Workspace.Some\\"`.\\n\\nThe return type is simply `Instance`. Any type-checking should be done on the return value:\\n```lua\\nlocal part = find(workspace, \\"SomePart\\") :: BasePart -- Blindly assume and type this as a BasePart\\nassert(part:IsA(\\"BasePart\\")) -- Extra optional precaution to ensure type\\n```","source":{"line":26,"path":"modules/find/init.luau"}}')}}]);